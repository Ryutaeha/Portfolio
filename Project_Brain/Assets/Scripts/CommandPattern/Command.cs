
#region Advantages
// 장점
// - 명령을 객체로 캡슐화하여, 요청을 매개변수화하고 저장 및 기록할 수 있습니다.
// - 실행될 명령을 독립적으로 관리할 수 있어 코드가 더 모듈화되고 유지보수성이 높아집니다.
// - 새로운 명령을 추가할 때 기존 코드를 변경할 필요 없이 쉽게 확장할 수 있습니다.
// - 실행 취소(Undo) 및 재실행(Redo) 기능을 구현하기 용이합니다.
// - 클라이언트와 수신자 간의 결합도를 낮출 수 있습니다.
#endregion

#region Disadvantages
// 단점
// - 클래스와 객체의 수가 증가하여 코드가 복잡해질 수 있습니다.
// - 간단한 작업을 처리하기 위해 너무 많은 클래스를 생성해야 할 수 있습니다.
// - 명령을 저장하고 관리하는 추가적인 코드가 필요합니다.
#endregion

#region When to Use
// 커맨드 패턴을 사용할만한 경우
// - 작업을 나중에 실행하거나, 큐에 저장하거나, 로그에 기록할 필요가 있을 때.
// - 여러 작업을 다른 순서로 실행할 필요가 있을 때.
// - 실행 취소(Undo) 및 재실행(Redo) 기능을 구현해야 할 때.
// - 작업의 실행을 매개변수화하거나, 여러 객체가 동일한 작업을 공유해야 할 때.
// - 작업을 분리하여 클라이언트와 수신자 간의 결합도를 낮추고자 할 때.
// - GUI 버튼과 같은 사용자 인터페이스 요소와 관련된 동작을 캡슐화하고자 할 때.
#endregion


// Command 클래스는 명령 패턴에서 사용할 추상 클래스입니다.
// 명령 패턴은 요청을 객체로 캡슐화하여 다양한 요청, 큐잉 및 로그 기능을 제공하고, 연산의 취소를 지원할 수 있게 합니다.
public abstract class Command
{
    #region Abstract Methods
    // Execute 메서드는 명령을 실행하는 추상 메서드입니다.
    // 이 메서드는 하위 클래스에서 구체적으로 구현하여 각 명령의 실제 동작을 정의합니다.
    public abstract void Execute();
    #endregion
}
